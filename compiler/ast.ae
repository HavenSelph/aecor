use "lib/vector.ae"
use "lib/map.ae"
use "compiler/types.ae"
use "compiler/tokens.ae"

enum ASTType {
    Assignment
    Address
    And
    Block
    BoolLiteral
    BitwiseAnd
    BitwiseOr
    BitwiseXor
    Break
    Call
    Cast
    CharLiteral
    Constant
    Constructor
    Continue
    Defer
    Dereference
    Divide
    DivideEquals
    EnumValue
    Equals
    FloatLiteral
    FormatStringLiteral
    For
    GreaterThan
    GreaterThanEquals
    If
    Identifier
    Index
    IntLiteral
    IsNotNull
    LeftShift
    LessThan
    LessThanEquals
    Match
    Member
    Minus
    MinusEquals
    Modulus
    Multiply
    MultiplyEquals
    Not
    NotEquals
    Null
    Or
    Plus
    PlusEquals
    Return
    RightShift
    SizeOf
    ScopeLookup
    StringLiteral
    UnaryMinus
    VarDeclaration
    Yield
    While
}

def ASTType::str(this): string => match this {
    Assignment => "Assignment"
    Address => "Address"
    And => "And"
    Block => "Block"
    BoolLiteral => "BoolLiteral"
    BitwiseAnd => "BitwiseAnd"
    BitwiseOr => "BitwiseOr"
    BitwiseXor => "BitwiseXor"
    Break => "Break"
    Call => "Call"
    Cast => "Cast"
    CharLiteral => "CharLiteral"
    Constructor => "Constructor"
    Constant => "Constant"
    Continue => "Continue"
    Defer => "Defer"
    Dereference => "Dereference"
    Divide => "Divide"
    DivideEquals => "DivideEquals"
    EnumValue => "EnumValue"
    Equals => "Equals"
    FloatLiteral => "FloatLiteral"
    FormatStringLiteral => "FormatStringLiteral"
    For => "For"
    GreaterThan => "GreaterThan"
    GreaterThanEquals => "GreaterThanEquals"
    If => "If"
    Identifier => "Identifier"
    Index => "Index"
    IntLiteral => "IntLiteral"
    IsNotNull => "IsNotNull"
    LeftShift => "LeftShift"
    LessThan => "LessThan"
    LessThanEquals => "LessThanEquals"
    Match => "Match"
    Member => "Member"
    Minus => "Minus"
    MinusEquals => "MinusEquals"
    Modulus => "Modulus"
    Multiply => "Multiply"
    MultiplyEquals => "MultiplyEquals"
    Not => "Not"
    NotEquals => "NotEquals"
    Null => "Null"
    Or => "Or"
    Plus => "Plus"
    PlusEquals => "PlusEquals"
    Return => "Return"
    RightShift => "RightShift"
    SizeOf => "SizeOf"
    ScopeLookup => "ScopeLookup"
    StringLiteral => "StringLiteral"
    UnaryMinus => "UnaryMinus"
    VarDeclaration => "VarDeclaration"
    Yield => "Yield"
    While => "While"
}

def ASTType::from_token(type: TokenType): ASTType => match type {
    Ampersand => ASTType::BitwiseAnd
    And => ASTType::And
    Caret => ASTType::BitwiseXor
    EqualEquals => ASTType::Equals
    Equals => ASTType::Assignment
    GreaterThan => ASTType::GreaterThan
    GreaterThanEquals => ASTType::GreaterThanEquals
    GreaterThanGreaterThan => ASTType::RightShift
    LessThan => ASTType::LessThan
    LessThanEquals => ASTType::LessThanEquals
    LessThanLessThan => ASTType::LeftShift
    Line => ASTType::BitwiseOr
    Minus => ASTType::Minus
    MinusEquals => ASTType::MinusEquals
    NotEquals => ASTType::NotEquals
    Or => ASTType::Or
    Percent => ASTType::Modulus
    Plus => ASTType::Plus
    PlusEquals => ASTType::PlusEquals
    Slash => ASTType::Divide
    SlashEquals => ASTType::DivideEquals
    Star => ASTType::Multiply
    StarEquals => ASTType::MultiplyEquals
    else => {
        panic(`Unhandled token type in ASTType::from_token: {type.str()}`)
    }
}

struct Variable {
    name: string
    type: &Type
    span: Span

    is_extern: bool
    extern_name: string
}

def Variable::new(name: string, type: &Type, span: Span): &Variable {
    let var = calloc(1, sizeof(Variable)) as &Variable
    var.name = name
    var.type = type
    var.span = span
    return var
}

struct Function {
    name: string
    params: &Vector     // Vector<&Variable>
    return_type: &Type
    body: &AST
    exits: bool

    type: &Type
    span: Span

    is_arrow: bool

    is_extern: bool
    extern_name: string

    is_static: bool
    is_method: bool
    method_struct_name: string
}

def Function::new(span: Span): &Function {
    let func = calloc(1, sizeof(Function)) as &Function
    func.params = Vector::new()
    func.span = span
    return func
}

struct Structure {
  type: &Type
  name: string
  fields: &Vector     // Vector<&Variable>
  span: Span

  is_extern: bool
  extern_name: string

  is_enum: bool
  is_union: bool
}

def Structure::new(span: Span): &Structure {
    let struc = calloc(1, sizeof(Structure)) as &Structure
    struc.fields = Vector::new()
    struc.span = span
    return struc
}

def Structure::find_field(&this, name: string): &Variable {
    for let i = 0; i < .fields.size; i += 1 {
        let field = .fields.at(i) as &Variable
        if field.name.eq(name) {
            return field
        }
    }
    return null
}

struct Program {
    functions: &Vector    // Vector<&Function>
    structures: &Vector   // Vector<&Structure>
    constants: &Vector    // Vector<&AST>
    global_vars: &Vector  // Vector<&AST>
    span: Span

    included_files: &Map  // Map<string, string>

    c_flags: &Vector           // Vector<string>
    c_includes: &Vector        // Vector<string>
    c_embed_headers: &Vector   // Vector<string>
}

def Program::new(): &Program {
    let prog = calloc(1, sizeof(Program)) as &Program
    prog.functions = Vector::new()
    prog.structures = Vector::new()
    prog.global_vars = Vector::new()
    prog.constants = Vector::new()

    prog.included_files = Map::new()

    prog.c_flags = Vector::new()
    prog.c_includes = Vector::new()
    prog.c_embed_headers = Vector::new()
    return prog
}

def Program::is_file_included(&this, filename: string): bool {
    let len = filename.len()
    if len > 2 and filename[0] == '.' and filename[1] == '/' {
        filename = &filename[2]
    }
    return .included_files.exists(filename)
}

def Program::add_included_file(&this, filename: string) {
    let len = filename.len()
    if len > 2 and filename[0] == '.' and filename[1] == '/' {
        filename = &filename[2]
    }
    .included_files.insert(filename, filename)
}

struct Block {
    statements: &Vector     // Vector<&AST>
}

struct Binary {
    lhs: &AST
    rhs: &AST
}

struct Identifier {
    name: string
    var: &Variable
    is_function: bool
    func: &Function
}

struct FormatString {
    parts: &Vector    // Vector<string>
    exprs: &Vector    // Vector<&AST>
}

struct Argument {
    expr: &AST
    label: &AST // Identifier
}

def Argument::new(label: &AST, expr: &AST): &Argument {
    let arg = calloc(1, sizeof(Argument)) as &Argument
    arg.expr = expr
    arg.label = label
    return arg
}

struct FuncCall {
    callee: &AST
    args: &Vector    // Vector<&Argument>
    func: &Function
    added_method_arg: bool
}

struct Constructor {
    callee: &AST      // Identifier
    struc: &Structure
    args: &Vector     // Vector<&Argument>
}

struct Member {
    lhs: &AST
    rhs: &AST   // &Identifier
    is_method: bool
    is_pointer: bool
}

struct EnumValue {
    lhs: &AST
    rhs: &AST
    struct_def: &Structure
    var: &Variable
}

struct VarDeclaration {
    var: &Variable
    init: &AST
}

struct IfStatement {
    cond: &AST
    body: &AST
    els: &AST
}

struct Loop {
    init: &AST
    cond: &AST
    incr: &AST
    body: &AST
}

struct Cast {
    lhs: &AST
    to: &Type
}

struct MatchCase {
    cond: &AST
    body: &AST
}

def MatchCase::new(cond: &AST, body: &AST): &MatchCase {
    let _case = calloc(1, sizeof(MatchCase)) as &MatchCase
    _case.cond = cond
    _case.body = body
    return _case
}

struct Match {
    expr: &AST
    cases: &Vector  // Vector<&MatchCase>
    defolt: &AST
    defolt_span: Span
}

union ASTUnion {
    block: Block
    binary: Binary
    ident: Identifier
    fmt_str: FormatString
    call: FuncCall
    member: Member
    enum_val: EnumValue
    var_decl: VarDeclaration
    if_stmt: IfStatement
    loop: Loop
    cast: Cast
    unary: &AST
    match_stmt: Match
    num_literal: string
    bool_literal: bool
    string_literal: string
    char_literal: string
    constructor: Constructor
    size_of_type: &Type
}

struct AST {
    type: ASTType
    span: Span
    u: ASTUnion
    etype: &Type
    returns: bool
}

def AST::new(type: ASTType, span: Span): &AST {
    let ast = calloc(1, sizeof(AST)) as &AST
    ast.type = type
    ast.span = span
    return ast
}

def AST::new_unop(type: ASTType, span: Span, expr: &AST): &AST {
    let ast = AST::new(type, span)
    ast.u.unary = expr
    return ast
}

def AST::new_binop(type: ASTType, lhs: &AST, rhs: &AST): &AST {
    let ast = AST::new(type, lhs.span.join(rhs.span))
    ast.u.binary.lhs = lhs
    ast.u.binary.rhs = rhs
    return ast
}

def AST::callee_is(&this, expected: string): bool {
    if not this? return false
    if .type != ASTType::Call return false
    if .u.call.callee.type != ASTType::Identifier return false
    let name = .u.call.callee.u.ident.name
    return name.eq(expected)
}

def AST::is_lvalue(&this): bool => match .type {
    Dereference => true
    Index => true
    Member => not .u.member.is_method
    Identifier => not .u.ident.is_function
    else => false
}
