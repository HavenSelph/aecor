
enum BaseType {
    Char
    Bool
    Void
    I8
    I16
    I32
    I64
    U8
    U16
    U32
    U64
    F32
    F64

    Pointer
    Structure
    Function
    Method
    Array
}

def BaseType::str(this): string {
    return match this {
        Char => "char"
        Bool => "bool"
        Void => "void"
        I8 => "i8"
        I16 => "i16"
        I32 => "i32"
        I64 => "i64"
        U8 => "u8"
        U16 => "u16"
        U32 => "u32"
        U64 => "u64"
        F32 => "f32"
        F64 => "f64"
        Pointer => "&"
        Structure => "structure"
        Function => "function"
        Method => "method"
        Array => "[]"
    }
}

struct Type {
    base: BaseType
    ptr: &Type
    name: string
    span: Span
    size_expr: &AST

    struct_def: &Structure

    func_def: &Function
    return_type: &Type
    params: &Vector      // Vector<&Variable>
}

def Type::new(base: BaseType, span: Span): &Type {
    let type = calloc(1, sizeof(Type)) as &Type
    type.base = base
    type.span = span
    return type
}

def Type::new_link(base: BaseType, next: &Type, span: Span): &Type {
    let type = Type::new(base, span)
    type.ptr = next

    // This is a hack to attach methods to strings
    if base == BaseType::Pointer and next? and next.base == BaseType::Char {
        type.name = "string"
    }
    return type
}

def Type::ptr_to(base: BaseType, span: Span): &Type {
    let next = Type::new(base, span)
    return Type::new_link(BaseType::Pointer, next, span)
}

def Type::is_struct_or_ptr(&this): bool {
    if .base == BaseType::Structure return true
    if .base != BaseType::Pointer return false
    return .ptr.base == BaseType::Structure
}

def Type::is_integer(&this): bool {
    return match .base {
        I8 | I16 | I32 | I64 |
        U8 | U16 | U32 | U64 => true
        else => false
    }
}

def Type::is_numeric(&this): bool {
    return match .base {
        I8 | I16 | I32 | I64 |
        U8 | U16 | U32 | U64 |
        F32 | F64 => true
        else => false
    }
}

def Type::eq(&this, other: &Type): bool {
    if (this == null and other == null) return true
    if (this == null or other == null) return false
    if .base != other.base return false

    match .base {
        // Not _technically_ right, but we shouldn't really ever be comparing methods
        Method => return false
        // FIXME: have some way of checking the size...
        Array => return .ptr.eq(other.ptr)
        Function => {
            if not .return_type.eq(other.return_type) return false
            if .params.size != other.params.size return false
            for let i = 0; i < .params.size; i += 1 {
                let a = .params.at(i) as &Variable
                let b = other.params.at(i) as &Variable
                if not a.type.eq(b.type) return false
            }
            return true
        }
        Structure => return .name.eq(other.name)
        Pointer => {
            // EXPERIMENTAL: `untyped_ptr` is equivalent to any pointer type.
            if .ptr.base == BaseType::Void or other.ptr.base == BaseType::Void {
                return true
            }
            return .ptr.eq(other.ptr)
        }
        else => return true
    }
}

def Type::str(&this): string {
    return match .base {
        Pointer => `&{.ptr.str()}`
        Array => `[{.ptr.str()}]`
        Structure => .name
        Function => "<function>"
        Method => "<method>"
        else => .base.str()
    }
}

def Type::is_string(&this): bool {
    return .base == BaseType::Pointer and .ptr.base == BaseType::Char
}

def Type::decay_array(&this): &Type {
    if .base != BaseType::Array return this
    return Type::new_link(BaseType::Pointer, .ptr, .span)
}
