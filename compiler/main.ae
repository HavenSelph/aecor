use "compiler/lexer.ae"
use "compiler/parser.ae"
use "compiler/typecheck.ae"
use "compiler/codegen.ae"

def usage(code: i32) {
    println("--------------------------------------------------------")
    println("Usage: ./aecor [options] <file>")
    println("Options:")
    println("    -o path   Output executable (default: ./out)")
    println("    -c path   Output C code (default: {out}.c)")
    println("    -s        Silent mode (no debug output)")
    println("    -n        Don't compile C code (default: false)")
    println("    -l        Library path (root of aecor repo)")
    println("                   (Default: working directory)")
    print("--------------------------------------------------------\n")
    exit(code)
}

def main(argc: i32, argv: &string) {
    let exec_path = "./out"
    let c_path = 0 as string
    let filename = 0 as string
    let compile_c = true
    let silent = false
    let lib_path = 0 as string

    for let i = 1; i < argc; i += 1 {
        if streq(argv[i], "-o") {
            i += 1
            exec_path = argv[i]
        } else if streq(argv[i], "-h") {
            usage(0)
        } else if streq(argv[i], "-s") {
            silent = true
        } else if streq(argv[i], "-n") {
            compile_c = false
        } else if streq(argv[i], "-l") {
            i += 1
            lib_path = argv[i]
        } else if streq(argv[i], "-c") {
            i += 1
            c_path = argv[i]
        } else if argv[i][0] == '-' {
            println("Unknown option: %s", argv[i])
            usage(1)
        } else if filename == 0 as string {
            filename = argv[i]
        } else {
            println("Unknown option/argument: '%s'", argv[i])
            usage(1)
        }
    }

    if filename == 0 as string {
        println("No file specified")
        usage(1)
    }

    if c_path == 0 as string {
        c_path = `{exec_path}.c`
    }

    let file = File::open(filename, "r")
    let contents = file.slurp()

    let lexer = Lexer::make(contents, filename)
    let tokens = lexer.lex()

    let parser = Parser::new(tokens)
    if lib_path != 0 as string {
        parser.add_include_dir(lib_path)
    }

    let program = parser.parse_program()

    let checker = TypeChecker::new()
    checker.check_program(program)

    let generator = CodeGenerator::make(c_path)
    generator.gen_program(program)

    if not compile_c {
        return 0
    }

    let cmdbuf = calloc(1, 1024) as string
    strcat(cmdbuf, `gcc -o {exec_path} {c_path}`)
    for let i = 0; i < program.c_flags.size; i += 1 {
        let flag = program.c_flags.at(i) as string
        strcat(cmdbuf, " ")
        strcat(cmdbuf, flag)
    }
    if not silent {
        println("[+] %s", cmdbuf)
    }
    let code = system(cmdbuf)
    if code != 0 {
        println("[-] Compilation failed")
        exit(code)
    }
}
