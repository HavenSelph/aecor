use "./compiler/ast.ae"

struct Parser {
    tokens: &Vector
    curr: i32
}

def Parser::make(tokens: &Vector): &Parser {
    let parser = calloc(1, sizeof(Parser)) as &Parser
    parser.tokens = tokens
    parser.curr = 0
    return parser
}

def Parser::error(&this, msg: string) {
    println("%s: %s", .token().loc.str(), msg)
    exit(1)
}

def Parser::unhandled_type(&this, func: string) {
    .error(`Unexpected token in {func}: {.token().type.str()}`)
}

def Parser::token(&this): &Token {
    return .tokens.at(.curr) as &Token
}

def Parser::token_is(&this, type: TokenType): bool {
    return .token().type == type
}

def Parser::consume_if(&this, type: TokenType): bool {
    if .token_is(type) {
        .curr += 1
        return true
    }
    return false
}

def Parser::consume_newline_or(&this, type: TokenType) {
    if .token_is(type) {
        .curr += 1
    } else if not .token().seen_newline {
        .error(`Expected {type.str()} or newline`)
    }
}

def Parser::consume(&this, type: TokenType): &Token {
    if not .consume_if(type) {
        .error(`Expected TokenType::{type.str()}`)
    }
    return .tokens.at(.curr - 1) as &Token
}


def Parser::parse_type(&this): &Type {
    .unhandled_type("parse_type")
    exit(1)
    return 0 as &Type
}

def Parser::parse_expression(&this): &AST {
    let node = 0 as &AST
    if .token_is(TokenType::IntLiteral) {
        node = AST::new(ASTType::IntLiteral, .token().loc)
        let tok = .consume(TokenType::IntLiteral)
        node.u.num_literal = tok.text
    } else {
        .unhandled_type("parse_expression")
    }
    return node
}


def Parser::parse_statement(&this): &AST {
    let node = 0 as &AST

    if .token_is(TokenType::Return) {
        node = AST::new(ASTType::Return, .token().loc)
        .consume(TokenType::Return)
        node.u.unary = .parse_expression()
    } else {
        .unhandled_type("parse_statement")
    }

    return node
}

def Parser::parse_block(&this): &AST {
    let node = AST::new(ASTType::Block, .token().loc)
    .consume(TokenType::OpenCurly)

    let statements = Vector::new()
    while not .token_is(TokenType::CloseCurly) {
        let statement = .parse_statement()
        statements.push(statement as untyped_ptr)
    }
    node.u.block.statements = statements

    .consume(TokenType::CloseCurly)
    return node;
}

def Parser::parse_function(&this): &Function {
    .consume(TokenType::Def)

    let struct_name = 0 as string
    let is_method = false
    let is_static = false
    let name = .consume(TokenType::Identifier)
    if .consume_if(TokenType::ColonColon) {
        is_method = true
        struct_name = name.text
        name = .consume(TokenType::Identifier)
    }

    let func = Function::new(name.loc)
    func.name = name.text
    func.is_method = is_method
    func.method_struct_name = struct_name

    .consume(TokenType::OpenParen)
    while not .token_is(TokenType::CloseParen) {
        let var_name = .consume(TokenType::Identifier)
        .consume(TokenType::Colon)
        let var_type = .parse_type()
        let var = Variable::new(var_name.text, var_type, var_name.loc)
        func.params.push(var as untyped_ptr)
    }
    .consume(TokenType::CloseParen)

    if .consume_if(TokenType::Colon) {
        func.return_type = .parse_type()
    } else {
        func.return_type = Type::new(BaseType::Void, name.loc)
    }

    func.is_extern = false
    func.body = .parse_block()
    return func
}

def Parser::parse_program(&this): &Program {
    let program = Program::new()
    while not .token_is(TokenType::EOF) {
        if .token_is(TokenType::Def) {
            let func = .parse_function()
            program.functions.push(func as untyped_ptr)
        } else {
            .unhandled_type("parse_program")
        }
    }
    return program
}