// This just reuses the lexer from the compiler,
// since that's already capable of lexing JSON.
use "compiler/lexer.ae"
use "lib/buffer.ae"
use "lib/value.ae"

struct JSONParser {
    tokens: &Vector
    curr: i32
}

def JSONParser::make(tokens: &Vector): JSONParser {
    let parser: JSONParser
    parser.tokens = tokens
    parser.curr = 0
    return parser
}
 
def JSONParser::token(&this): &Token => .tokens.at(.curr)

def JSONParser::consume(&this, type: TokenType): &Token {
    if .token().type != type {
        println("Expected %s but got %s", type.str(), .token().type.str())
        exit(1)
    }
    let tok = .token()
    .curr += 1
    return tok
}

def JSONParser::parse_object(&this): &Value {
    .consume(TokenType::OpenCurly)
    let json = Value::new(ValueType::Dictionary)
    while .token().type != TokenType::CloseCurly {
        let key = .consume(TokenType::StringLiteral)
        .consume(TokenType::Colon)
        let value = .parse_value()
        json.u.as_dict.insert(key.text, value)
        if .token().type == TokenType::Comma {
            .consume(TokenType::Comma)
        }
    }
    .consume(TokenType::CloseCurly)
    return json
}

def JSONParser::parse_array(&this): &Value {
    .consume(TokenType::OpenSquare)
    let json = Value::new(ValueType::List)
    while .token().type != TokenType::CloseSquare {
        let value = .parse_value()
        json.u.as_list.push(value)
        if .token().type == TokenType::Comma {
            .consume(TokenType::Comma)
        }
    }
    .consume(TokenType::CloseSquare)
    return json
}

def JSONParser::parse_value(&this): &Value => match .token().type {
    Null => {
        .consume(TokenType::Null)
        yield Value::new(ValueType::Null)
    }
    True | False => {
        let json = Value::new(ValueType::Bool)
        let tok = .token()
        json.u.as_bool = tok.text.eq("true")
        .curr += 1
        yield json
    }
    IntLiteral => {
        let json = Value::new(ValueType::Integer)
        let tok = .consume(TokenType::IntLiteral)
        json.u.as_num = tok.text.to_i32() as i64
        yield json
    }
    StringLiteral => {
        let json = Value::new(ValueType::String)
        json.u.as_str = .consume(TokenType::StringLiteral).text
        yield json
    }
    OpenCurly => .parse_object()
    OpenSquare => .parse_array()
    else => {
        println("Unexpected token in JSONParser::parse_value: %s", .token().type.str())
        exit(1)
    }
}

def JSONParser::parse(&this): &Value => match .token().type {
    OpenCurly => .parse_object()
    OpenSquare => .parse_array()
    else => {
        println("Expected { or [ at JSON top level")
        exit(1)
    }
}

////////////////////////////////////////////////////////////////////////////////

// namespace JSON
struct JSON {}

def JSON::parse(source: string, filename: string): &Value {
    let lexer = Lexer::make(source, filename)
    let tokens = lexer.lex()
    let parser = JSONParser::make(tokens)
    return parser.parse()
}

def JSON::parse_from_string(json_str: string): &Value => JSON::parse(json_str, "<anonymous>")

def JSON::parse_from_file(filename: string): &Value {
    let file = File::open(filename, "r")
    let source = file.slurp()
    file.close()
    return JSON::parse(source, filename)
}

def JSON::serialize_into(val: &Value, sb: &Buffer) {
    match val.type {
        Null => sb.puts("null")
        Bool => sb.puts(if val.u.as_bool "true" else "false")
        Integer => sb.putsf(`{val.u.as_num}`)
        String => {
            sb.puts("\"")
            sb.puts(val.u.as_str)
            sb.puts("\"")
        }
        List => {
            sb.puts("[")
            let lst = val.u.as_list
            for let i = 0; i < lst.size; i += 1 {
                let value = lst.at(i) as &Value
                if i > 0 {
                    sb.puts(", ")
                }
                JSON::serialize_into(value, sb)
            }
            sb.puts("]")
        }
        Dictionary => {
            sb.puts("{")
            let first = true
            for let iter = val.u.as_dict.iter(); iter.cur?; iter.next() {
                if not first {
                    sb.puts(", ")
                }
                first = false
                sb.puts("\"")
                sb.puts(iter.key())
                sb.puts("\": ")
                let value = iter.value() as &Value
                JSON::serialize_into(value, sb)
            }
            sb.puts("}")
        }
    }
}

def JSON::serialize(val: &Value): Buffer {
    let sb = Buffer::make()
    JSON::serialize_into(val, &sb)
    return sb
}
