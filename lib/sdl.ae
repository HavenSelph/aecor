@compiler c_include "SDL2/SDL.h"
@compiler c_include "SDL2/SDL_image.h"
@compiler c_include "SDL2/SDL_ttf.h"
@compiler c_flag "-lSDL2 -lSDL2_image -l SDL2_ttf"

struct SDLWindow extern("SDL_Window")
struct SDLRenderer extern("SDL_Renderer")

struct SDLTexture extern("SDL_Texture")
def SDLTexture::destroy(&this) extern("SDL_DestroyTexture")

struct SDLRect extern("SDL_Rect") {
    x: i32
    y: i32
    w: i32
    h: i32
}

struct SDLSurface extern("SDL_Surface")
def SDLSurface::destroy(&this) extern("SDL_FreeSurface")

struct SDLColor extern("SDL_Color") {
    r: i32 // Not really i32, but it's convenient
    g: i32
    b: i32
    a: i32
}

enum Key extern("SDL_Keycode") {
    A = extern("SDLK_a")
    B = extern("SDLK_b")
    C = extern("SDLK_c")
    D = extern("SDLK_d")
    E = extern("SDLK_e")
    F = extern("SDLK_f")
    G = extern("SDLK_g")
    H = extern("SDLK_h")
    I = extern("SDLK_i")
    J = extern("SDLK_j")
    K = extern("SDLK_k")
    L = extern("SDLK_l")
    M = extern("SDLK_m")
    N = extern("SDLK_n")
    O = extern("SDLK_o")
    P = extern("SDLK_p")
    Q = extern("SDLK_q")
    R = extern("SDLK_r")
    S = extern("SDLK_s")
    T = extern("SDLK_t")
    U = extern("SDLK_u")
    V = extern("SDLK_v")
    W = extern("SDLK_w")
    X = extern("SDLK_x")
    Y = extern("SDLK_y")
    Z = extern("SDLK_z")

    Up = extern("SDLK_UP")
    Down = extern("SDLK_DOWN")
    Left = extern("SDLK_LEFT")
    Right = extern("SDLK_RIGHT")
    Space = extern("SDLK_SPACE")
    Escape = extern("SDLK_ESCAPE")
}

struct SDLKeysym extern("SDL_Keysym") {
    scancode: i32
    sym: Key
    mod: i32
}

enum EventType extern {
    Quit = extern("SDL_QUIT")
    KeyDown = extern("SDL_KEYDOWN")
    KeyUp = extern("SDL_KEYUP")
}

struct SDLKeyboardEvent extern("SDL_KeyboardEvent") {
    type: i32
    keysym: SDLKeysym
}

struct SDLEvent extern("SDL_Event") {
    type: EventType
    key: SDLKeyboardEvent
}

const SDL_INIT_EVERYTHING: i32 extern
const SDL_PIXELFORMAT_ABGR8888: i32 extern
const SDL_TEXTUREACCESS_STREAMING: i32 extern

// Just a namespace
struct SDL {}

def SDL::init(flags: i32) extern("SDL_Init")
def SDL::quit() extern("SDL_Quit")
def SDL::create_window_renderer(
    width: i32,
    height: i32,
    flags: i32, window: &&SDLWindow,
    renderer: &&SDLRenderer) extern("SDL_CreateWindowAndRenderer")
def SDL::delay(ms: i32) extern("SDL_Delay")
def SDL::get_mouse_state(x: &i32, y: &i32): i32 extern("SDL_GetMouseState")
def SDL::show_cursor(toggle: bool) extern("SDL_ShowCursor")

def SDLRenderer::clear(&this) extern("SDL_RenderClear")
def SDLRenderer::present(&this) extern("SDL_RenderPresent")
def SDLRenderer::copy(&this, texture: &SDLTexture, src: &SDLRect, dst: &SDLRect) extern("SDL_RenderCopy")
def SDLRenderer::copy_ex(&this, texture: &SDLTexture, src: &SDLRect, dst: &SDLRect, angle: f32, center: untyped_ptr, flip: i32) extern("SDL_RenderCopyEx")
def SDLRenderer::set_draw_color(&this, r: i32, g: i32, b: i32, a: i32) extern("SDL_SetRenderDrawColor")
def SDLRenderer::destroy(&this) extern("SDL_DestroyRenderer")
def SDLRenderer::load_image(&this, path: string): &SDLTexture extern("IMG_LoadTexture")
def SDLRenderer::create_texture_from_surface(&this, surface: &SDLSurface): &SDLTexture extern("SDL_CreateTextureFromSurface")
def SDLRenderer::create_texture(&this, format: i32, access: i32, w: i32, h: i32): &SDLTexture extern("SDL_CreateTexture")

def SDLWindow::destroy(&this) extern("SDL_DestroyWindow")

// FIXME: what's a and b?
def SDLTexture::query(&this, a: untyped_ptr, b: untyped_ptr, w: &i32, h: &i32) extern("SDL_QueryTexture")
def SDLTexture::lock(&this, rect: &SDLRect, pixels: &untyped_ptr, pitch: &i32) extern("SDL_LockTexture")
def SDLTexture::unlock(&this) extern("SDL_UnlockTexture")

def SDL::poll_event(event: &SDLEvent): bool extern("SDL_PollEvent")

// SDL2_TTF

struct TTFFont extern("TTF_Font")

def TTFFont::load(path: string, size: i32): &TTFFont extern("TTF_OpenFont")
def TTFFont::render_solid(&this, text: string, color: SDLColor): &SDLSurface extern("TTF_RenderText_Solid")

// Namespace
struct TTF {}

def TTF::init(): i32 extern("TTF_Init")
def TTF::get_error(): string extern("TTF_GetError")