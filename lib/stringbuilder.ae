
// Maybe abstract away the resizing with a `Buffer` type, 
// and share this with `Vector`
struct StringBuilder {
    data: string
    size: i32
    capacity: i32
}

def StringBuilder::make(): StringBuilder {
    let initial_capacity = 16;
    return StringBuilder(
        data: calloc(initial_capacity, 1),
        size: 0,
        capacity: initial_capacity
    )
}

def StringBuilder::resize_if_necessary(&this, new_size: i32) {
    if new_size >= .capacity {
        let new_capacity = max(.capacity * 2, new_size)
        .data = realloc(.data, new_capacity) as string
    }
}

def StringBuilder::puts(&this, s: string) {
    let len = s.len()
    .resize_if_necessary(new_size: .size + len + 1) // +1 for null terminator
    copy_memory(.data + .size, s, len + 1) // Copy over null terminator
    .size += len
}

def StringBuilder::putc(&this, c: char) {
    .resize_if_necessary(new_size: .size + 2) // +1 for null terminator
    .data[.size] = c
    .size += 1
    .data[.size] = '\0'
}

// Put and free the string
def StringBuilder::putsf(&this, s: string) {
    .puts(s)
    free(s)
}

def StringBuilder::str(&this): string => .data
def StringBuilder::new_str(&this): string => .data.copy()