@compiler c_include "stdio.h"
@compiler c_include "stdlib.h"
@compiler c_include "stdbool.h"
@compiler c_include "stdint.h"
@compiler c_include "string.h"
@compiler c_include "./lib/prelude.h"

def malloc(size: i32): untyped_ptr extern
def realloc(old: untyped_ptr, size: i32): untyped_ptr extern
def calloc(size: i32, num: i32): untyped_ptr extern
def free(ptr: untyped_ptr) extern

let SEEK_END: i32 extern
let SEEK_SET: i32 extern
let SEEK_CUR: i32 extern

struct File extern("FILE")
def File::open(path: string, mode: string): &File extern("fopen")
def File::close(&this) extern("fclose")
def File::tell(&this): i32 extern("ftell")
def File::seek(&this, offset: i32, whence: i32): i32 extern("fseek")

def File::slurp(&this): string {
    let pos = this.tell()
    .seek(0, SEEK_END)
    let size = this.tell()
    .seek(pos, SEEK_SET)
    let buf = malloc((size+1) * sizeof(char))
    fread(buf, 1, size, this)
    .seek(pos, SEEK_SET)
    return buf as string
}

def File::puts(&this, str: string) {
    fwrite(str as untyped_ptr, 1, strlen(str), this)
}

// TODO: Add nicer wrappers around these
def fread(ptr: untyped_ptr, size: i32, num: i32, file: &File) extern
def fwrite(ptr: untyped_ptr, size: i32, num: i32, file: &File) extern

def exit(code: i32) extern

def strlen(str: string): i32 extern
def strcmp(str1: string, str2: string): i32 extern
def strcpy(dest: string, src: string): string extern
def strncpy(dest: string, src: string, n: i32): string extern
def strdup(str: string): string extern

def streq(str1: string, str2: string): bool {
    return strcmp(str1, str2) == 0
}

def substring(str: string, start: i32, len: i32): string {
    let new_str = calloc(len + 1, sizeof(char)) as string
    strncpy(new_str, str + start, len)
    return new_str
}

def puts(str: string) extern
